-- 1. What is the total amount each customer spent at the restaurant?

SELECT sales.customer_id, SUM(menu.price)
FROM sales
JOIN menu
ON sales.product_id = menu.product_id
GROUP BY 1
ORDER BY 1;

-- 2. How many days has each customer visited the restaurant?

SELECT customer_id, COUNT(DISTINCT order_date)
FROM sales
GROUP BY 1
ORDER BY 1;

-- 3. What was the first item from the menu purchased by each customer?

WITH order_of_order AS (SELECT *, ROW_NUMBER () OVER (PARTITION BY customer_id ORDER BY order_date) as columnx
FROM sales)

SELECT o.customer_id, menu.product_name
FROM order_of_order o
JOIN menu
ON o.product_id = menu.product_id
WHERE columnx = 1;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT menu.product_name, COUNT(sales.product_id)
FROM menu
JOIN sales
ON menu.product_id = sales.product_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

-- 5. Which item was the most popular for each customer?

WITH product_count AS (SELECT s.customer_id, m.product_name, COUNT(*) AS order_count
FROM sales s
JOIN menu m 
ON s.product_id = m.product_id
GROUP BY s.customer_id, m.product_name)

SELECT customer_id, product_name AS most_popular_item
FROM product_count
WHERE order_count = (SELECT MAX(order_count)
    FROM product_count pc2
    WHERE pc2.customer_id = product_count.customer_id)
ORDER BY customer_id, product_name;

-- 6. Which item was purchased first by the customer after they became a member?

WITH tableee AS (SELECT sales.customer_id, sales.order_date, sales.product_id, ROW_NUMBER () OVER (PARTITION BY sales.customer_id ORDER BY sales.order_date) as priorities
FROM sales
JOIN members
ON sales.customer_id = members.customer_id
WHERE order_date > join_date)

SELECT tableee.customer_id, menu.product_name
FROM tableee
JOIN menu
	ON tableee.product_id = menu.product_id
WHERE tableee.priorities = 1
ORDER BY 1;

-- 7. Which item was purchased just before the customer became a member?

WITH tableee2 AS (SELECT sales.customer_id, sales.order_date, sales.product_id, DENSE_RANK () OVER (PARTITION BY sales.customer_id ORDER BY sales.order_date DESC) as priorities2
FROM sales
JOIN members
ON sales.customer_id = members.customer_id
WHERE order_date < join_date)

SELECT tableee2.customer_id, menu.product_name
FROM tableee2
JOIN menu
	ON tableee2.product_id = menu.product_id
WHERE tableee2.priorities2 = 1
ORDER BY 1;

-- 8. What is the total items and amount spent for each member before they became a member?

SELECT sales.customer_id, COUNT(sales.product_id) as total_items, SUM(menu.price) as amount_spent
FROM sales
JOIN menu
	ON sales.product_id = menu.product_id
GROUP BY 1
ORDER BY 1;

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

WITH points_table AS (SELECT sales.customer_id, menu.product_name,
CASE 
WHEN menu.product_name = 'curry' THEN menu.price*10 
WHEN menu.product_name = 'ramen' THEN menu.price*10 
WHEN menu.product_name = 'sushi' THEN menu.price*10*2
END AS points
FROM sales
JOIN menu
	ON sales.product_id = menu.product_id
ORDER BY 1)

SELECT points_table.customer_id, SUM(points_table.points)
FROM points_table
GROUP BY 1;

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

WITH pointsss AS (SELECT sales.customer_id, menu.product_name, sales.order_date,
CASE
WHEN sales.order_date >= members.join_date AND sales.order_date <= DATE(members.join_date + INTERVAL '7 days') THEN menu.price*10*2
ELSE menu.price*10
END AS pointss
FROM sales
JOIN menu 
	ON sales.product_id = menu.product_id
JOIN members
	ON sales.customer_id = members.customer_id
ORDER BY 1,3)

SELECT pointsss.customer_id, SUM(pointsss.pointss) as total_points_january
FROM pointsss
WHERE pointsss.order_date < '2021-01-31'
GROUP BY pointsss.customer_id;
